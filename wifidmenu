#!/bin/bash

# Scans for available wifi networks, lists them with signal strength and Authentication.
# Displays existing Wifi networks in wpa.conf and their passwords and comments
# Joins it all together in a numbered list, so that they can be selected in dmenu

# If SSID exists, ask if you want to delete, replace, make new or nothing
# If WPA, ask for passphrase, then do wpa_passphrase with SSID, and add "WPA" to authentication note
# If WEP, ask for passphrase then add WEP to authentication note
# If no security, add with that condition.
# Exit.

# Path Variables

IFS=$'\n'
config=$'/home/danniel/.config/wifisetup/'
# TODO: Find interface automatically
interface=$'wlp4s0'
supplicant="$( printf "/etc/wpa_supplicant/wpa_supplicant-${interface}.conf" )" 

# TEST
echo $supplicant

# Displays list of available wifi networks sorted by signal strength followed by wpa_supplicant existing networks in dmenu.
# TODO: If network already exists in wpa_supplicant, merge results?
# TODO: Easy, add filename field to existing wifis.

wifi="$({ wpa_cli -i "${interface}" scan > /dev/null; sleep 1; wpa_cli -i "${interface}" scan_results | sort -rn -k3 | sed -E 's/$/"/g;s/^/"/g;s/\t/""\t""/g' | awk -F '"\t"' '{print $5,$3,$4}' | sed -E '1d' ; cat ${config}public.conf | grep -E 'ssid|#psk|#key_mgmt|#comments' | tr -d '\n' | sed -E -e 's/\tssid="/\n"/g;s/\t#psk=/""\t""/g;s/"\t\#key_mgmt=/""\t""/g;s/\t#comments="/""\t""/g' | sed -E '1d' | awk -F '"\t"' '{print $1,$3,$2,$4}' ; } | awk '{print NR,$0}' | column -t -s $'\t' | dmenu -i -l 10)"

# TEST
echo "$wifi"

# Exit if none is selected

if [[ "${#wifi}" -eq "0" ]]
then
	exit 0
fi

# Define SSID and key_mgmt variable
# TODO: Is there a better way to awk the different parts of the script? Maybe storing it as an array and calling it with $[wifi(1)]

SSID="$(echo "${wifi}" | awk '{print $2}')"
key_mgmt="$(echo "${wifi}" | awk -F '"' '{print $6}')"

# If network exists in wpa_supplicant, ask what to do with it. If not, automatically call it new.

if find "${config}" -type f -print0 | xargs -0 grep -HE "ssid\="${SSID}""
then

# If SSID exists, ask whether you want to delete, replace or create a new instance. Find file where you want to do it.

	mode="$( printf "replace\ncreate\ndelete" | dmenu -i -p "This network exists already, what do you want to do?" )"
	
	if [ "${mode}" = "replace" -o "${mode}" = "delete" ]
	then

	filename="$( find "${config}" -type f -print0 | xargs -0 grep -HlE "ssid\="${SSID}"" | sed -e "s,"${config}",,g" -e 's/\.conf//g' | dmenu -i -l 10 -p "Where is the instance you want to ${mode}?" )"
	filepath="$(printf "${config}${filename}.conf" )"

	sed -E -e '/^\s*$/d' "${filepath}" | sed -E -e ':a;N;$!ba;s/\n/\; /g' -e 's/\;\s*network/\nnetwork/g' | sed 's/\(.*\)\}.*/\1\}/' | sort -u | sed "/ssid\="${SSID}"/d" | sed 's/\; /\n/g' > "${filepath}" 

	if [ "${mode}" = "delete" ]
	then
		echo "delete_success"
		exit 0
		fi
	fi
else
	mode=$'create'
fi

# If SSID doesn't exist, mode is create and it asks for where you want to create it.

if [ "${mode}" = "create" ]
then
	filename="$( ls -a | grep ".conf" | sed -e 's/\.conf//g' | dmenu -i -l 10 -p "Where do you want to ${mode} it?" )"
fi

# Set the filepath variable

filepath="$(printf "${config}${filename}.conf" )"

# Allow for escape. If no filename is selected or written.
if [ "${#filename}" -eq "0" ]
then
	exit 0
fi

# Makes sure password is longer than 8 characters. If it's not a WPA network, there's no minimum length. Is pairwise needed?

if [[ "${key_mgmt}" =~ "WPA" ]] 
then
	until [ "${#Pass}" -gt "8" ]
		do
		Pass="$( echo "" | dmenu -p "WPA Passphrase: ")"
		psk="$( wpa_passphrase "${SSID}" "${Pass}" | grep "psk" | awk '{print $1}' | sed '1d' )" 
		done
	key="WPA-PSK"
elif [[ "${key_mgmt}" =~ "WEP" ]] 
then
	key="NONE"
			Pass="$( echo "" | dmenu -p "WEP Passphrase: ")"
			psk="$( printf "	psk="${Pass}"" )"
else 
	key="NONE"
fi

# Allow for escape. If no password is entered.
if [ "${#key}" -eq "0" ]
then
	exit 0
fi

# A place to add Comments to the network (eg. Location, Place Name, etc.) so that if network names are repeated, you can figure out which is which and not overwrite.

Comments="$( echo "" | dmenu -p "Comments: ")"

# Timestamp to add to comments

timestamp() {
	date +"%Y-%m-%d_%H-%M-%S"
}

# TODO: DELETE THIS New network format 

echo $SSID
echo $Pass
echo $Comments
echo "$key"
echo "$pairwise"
echo "$mode"
echo "$filename"
echo "$filepath"
echo "$(timestamp)"


if [[ "${key}" = "WPA-PSK" ]]
then
newnetwork="$( printf "network={
	ssid="$SSID"
	#key_mgmt="${key_mgmt}"
	key_mgmt="${key}"
	#psk=\""${Pass}"\"
	"${psk}"
	#comments=\""${Comments}"\"
	#lastmodified=\""$(timestamp)"\"
	#file="${filename}"
}
" )"
elif [[ "${key}" = "NONE" && "${#psk}" -gt "1" ]]
then
newnetwork="$( printf "network={
	ssid=\""$SSID"\"
	#key_mgmt="${key_mgmt}"
	key_mgmt="${key}"
	#psk=\""${Pass}"\"
	"${psk}"
	#comments=\""${Comments}"\"
	#lastmodified=\""$(timestamp)"\"
	#file="${filename}"
}
" )"
elif [[ "${key}" = "NONE" ]]
then
newnetwork="$( printf "network={
	ssid=\""$SSID"\"
	#key_mgmt="${key_mgmt}"
	key_mgmt="${key}"
	#comments=\""${Comments}"\"
	#lastmodified=\""$(timestamp)"\"
	#file="${filename}"
}
" )"
fi

# Add new network to selected file.

echo "${newnetwork}"

echo "${newnetwork}" >> "${filepath}"

# TODO: Last action is to combine all these files, with a header file first, and then overwrite the /etc file

# Concatenates it all into one file
echo -e "###\n$(<private.conf)\n###\n$(<public.conf)" > wpa.conf 

# TODO:
# Separate script idea: If no known connection is found in the first 20 seconds, disconnect wifi until this script is run.
# Another idea: Make this be the way to choose which network you're connected to as well.
# Add an option that lets you fill it in yourself, populated with the above variables already, and with the other options available but commented out.
